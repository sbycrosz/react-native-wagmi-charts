{"version":3,"sources":["getArea.ts"],"names":["shape","scaleLinear","getArea","data","width","height","gutter","_shape","yDomain","xDomain","timestamps","map","timestamp","i","scaleX","domain","Math","min","max","range","scaleY","area","x","_","y0","d","value","y1","curve"],"mappings":"AAAA;AACA,OAAO,KAAKA,KAAZ,MAAuB,UAAvB;AAIA;AACA,SAASC,WAAT,QAA4B,UAA5B;AAEA,OAAO,SAASC,OAAT,CAAiB;AACtBC,EAAAA,IADsB;AAEtBC,EAAAA,KAFsB;AAGtBC,EAAAA,MAHsB;AAItBC,EAAAA,MAJsB;AAKtBN,EAAAA,KAAK,EAAEO,MALe;AAMtBC,EAAAA,OANsB;AAOtBC,EAAAA;AAPsB,CAAjB,EAgBI;AACT,QAAMC,UAAU,GAAGP,IAAI,CAACQ,GAAL,CAAS,CAAC;AAAEC,IAAAA;AAAF,GAAD,EAAgBC,CAAhB,KAAuBJ,OAAO,GAAGG,SAAH,GAAeC,CAAtD,CAAnB;AAEA,QAAMC,MAAM,GAAGb,WAAW,GACvBc,MADY,CACLN,OADK,aACLA,OADK,cACLA,OADK,GACM,CAACO,IAAI,CAACC,GAAL,CAAS,GAAGP,UAAZ,CAAD,EAA0BM,IAAI,CAACE,GAAL,CAAS,GAAGR,UAAZ,CAA1B,CADN,EAEZS,KAFY,CAEN,CAAC,CAAD,EAAIf,KAAJ,CAFM,CAAf;AAGA,QAAMgB,MAAM,GAAGnB,WAAW,GACvBc,MADY,CACL,CAACP,OAAO,CAACS,GAAT,EAAcT,OAAO,CAACU,GAAtB,CADK,EAEZC,KAFY,CAEN,CAACd,MAAM,GAAGC,MAAV,EAAkBA,MAAlB,CAFM,CAAf;AAGA,QAAMe,IAAI,GAAGrB,KAAK,CACfqB,IADU,GAEVC,CAFU,CAER,CAACC,CAAD,EAAaV,CAAb,KAA2BC,MAAM,CAACL,OAAO,GAAGC,UAAU,CAACG,CAAD,CAAb,GAAmBA,CAA3B,CAFzB,EAGVW,EAHU,CAGNC,CAAD,IAA2BL,MAAM,CAACK,CAAC,CAACC,KAAH,CAH1B,EAIVC,EAJU,CAIP,MAAMtB,MAJC,EAKVuB,KALU,CAKJrB,MALI,EAKIJ,IALJ,CAAb;AAMA,SAAOkB,IAAP;AACD","sourcesContent":["// @ts-ignore\nimport * as shape from 'd3-shape';\n\nimport type { TLineChartData, YDomain } from '../types';\n\n// @ts-ignore\nimport { scaleLinear } from 'd3-scale';\n\nexport function getArea({\n  data,\n  width,\n  height,\n  gutter,\n  shape: _shape,\n  yDomain,\n  xDomain,\n}: {\n  data: TLineChartData;\n  width: number;\n  height: number;\n  gutter: number;\n  shape?: unknown;\n  yDomain: YDomain;\n  xDomain?: [number, number];\n}): string {\n  const timestamps = data.map(({ timestamp }, i) => (xDomain ? timestamp : i));\n\n  const scaleX = scaleLinear()\n    .domain(xDomain ?? [Math.min(...timestamps), Math.max(...timestamps)])\n    .range([0, width]);\n  const scaleY = scaleLinear()\n    .domain([yDomain.min, yDomain.max])\n    .range([height - gutter, gutter]);\n  const area = shape\n    .area()\n    .x((_: unknown, i: number) => scaleX(xDomain ? timestamps[i] : i))\n    .y0((d: { value: unknown }) => scaleY(d.value as number))\n    .y1(() => height)\n    .curve(_shape)(data);\n  return area;\n}\n"]}