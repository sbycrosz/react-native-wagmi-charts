{"version":3,"sources":["HorizontalLine.tsx"],"names":["Animated","useAnimatedProps","useDerivedValue","withTiming","Line","SVGLine","LineChartDimensionsContext","React","getXPositionForCurve","getYForX","useLineChart","AnimatedLine","createAnimatedComponent","LineChartHorizontalLine","displayName","color","lineProps","at","index","offsetY","width","parsedPath","height","gutter","useContext","yDomain","y","yForX","offsetTop","max","value","percentageOffsetTop","min","heightBetweenGutters","offsetTopPixels","lineAnimatedProps","x1","x2","y1","y2"],"mappings":";;AAAA,OAAOA,QAAP,IACEC,gBADF,EAEEC,eAFF,EAGEC,UAHF,QAIO,yBAJP;AAKA,SAAoBC,IAAI,IAAIC,OAA5B,QAA2C,kBAA3C;AAEA,SAASC,0BAAT,QAA2C,SAA3C;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,oBAAT,QAAqC,8BAArC;AACA,SAASC,QAAT,QAAyB,qBAAzB;AACA,SAASC,YAAT,QAA6B,gBAA7B;AAEA,MAAMC,YAAY,GAAGX,QAAQ,CAACY,uBAAT,CAAiCP,OAAjC,CAArB;AAmCAQ,uBAAuB,CAACC,WAAxB,GAAsC,yBAAtC;AAEA,OAAO,SAASD,uBAAT,CAAiC;AACtCE,EAAAA,KAAK,GAAG,MAD8B;AAEtCC,EAAAA,SAAS,GAAG,EAF0B;AAGtCC,EAAAA,EAAE,GAAG;AAAEC,IAAAA,KAAK,EAAE;AAAT,GAHiC;AAItCC,EAAAA,OAAO,GAAG;AAJ4B,CAAjC,EAKiB;AACtB,QAAM;AAAEC,IAAAA,KAAF;AAASC,IAAAA,UAAT;AAAqBC,IAAAA,MAArB;AAA6BC,IAAAA;AAA7B,MAAwChB,KAAK,CAACiB,UAAN,CAC5ClB,0BAD4C,CAA9C;AAGA,QAAM;AAAEmB,IAAAA;AAAF,MAAcf,YAAY,EAAhC;AAEA,QAAMgB,CAAC,GAAGxB,eAAe,CAAC,MAAM;AAC9B,QAAI,OAAOe,EAAP,KAAc,QAAd,IAA0BA,EAAE,CAACC,KAAH,IAAY,IAA1C,EAAgD;AAC9C,YAAMA,KAAK,GAAG,OAAOD,EAAP,KAAc,QAAd,GAAyBA,EAAzB,GAA8BA,EAAE,CAACC,KAA/C;AACA,YAAMS,KAAK,GACTlB,QAAQ,CAACY,UAAD,EAAcb,oBAAoB,CAACa,UAAD,EAAaH,KAAb,CAAlC,CAAR,IAAkE,CADpE;AAEA,aAAOf,UAAU,CAACwB,KAAK,GAAGR,OAAT,CAAjB;AACD;AACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEI,UAAMS,SAAS,GAAGH,OAAO,CAACI,GAAR,GAAcZ,EAAE,CAACa,KAAnC;AACA,UAAMC,mBAAmB,GAAGH,SAAS,IAAIH,OAAO,CAACI,GAAR,GAAcJ,OAAO,CAACO,GAA1B,CAArC;AAEA,UAAMC,oBAAoB,GAAGX,MAAM,GAAGC,MAAM,GAAG,CAA/C;AAEA,UAAMW,eAAe,GAAGX,MAAM,GAAGQ,mBAAmB,GAAGE,oBAAvD;AAEA,WAAO9B,UAAU,CAAC+B,eAAe,GAAGf,OAAnB,CAAjB;AACD,GAzBwB,EAyBtB,CAACF,EAAD,EAAKM,MAAL,EAAaD,MAAb,EAAqBH,OAArB,EAA8BE,UAA9B,EAA0CI,OAAO,CAACI,GAAlD,EAAuDJ,OAAO,CAACO,GAA/D,CAzBsB,CAAzB;AA2BA,QAAMG,iBAAiB,GAAGlC,gBAAgB,CACxC,OAAO;AACLmC,IAAAA,EAAE,EAAE,CADC;AAELC,IAAAA,EAAE,EAAEjB,KAFC;AAGLkB,IAAAA,EAAE,EAAEZ,CAAC,CAACI,KAHD;AAILS,IAAAA,EAAE,EAAEb,CAAC,CAACI;AAJD,GAAP,CADwC,EAOxC,CAACV,KAAD,EAAQM,CAAR,CAPwC,CAA1C;AAUA,sBACE,oBAAC,YAAD;AACE,IAAA,aAAa,EAAES,iBADjB;AAEE,IAAA,WAAW,EAAE,CAFf;AAGE,IAAA,MAAM,EAAEpB,KAHV;AAIE,IAAA,eAAe,EAAC;AAJlB,KAKMC,SALN,EADF;AASD","sourcesContent":["import Animated, {\n  useAnimatedProps,\n  useDerivedValue,\n  withTiming,\n} from 'react-native-reanimated';\nimport { LineProps, Line as SVGLine } from 'react-native-svg';\n\nimport { LineChartDimensionsContext } from './Chart';\nimport React from 'react';\nimport { getXPositionForCurve } from './utils/getXPositionForCurve';\nimport { getYForX } from 'react-native-redash';\nimport { useLineChart } from './useLineChart';\n\nconst AnimatedLine = Animated.createAnimatedComponent(SVGLine);\n\ntype HorizontalLineProps = {\n  color?: string;\n  lineProps?: Partial<LineProps>;\n  offsetY?: number;\n  /**\n   * (Optional) A pixel value to nudge the line up or down.\n   *\n   * This may be useful to customize the line's position based on the thickness of your cursor or chart path.\n   *\n   * ```tsx\n   * <LineChart.HorizontalLine\n   *   at={{ index: 3 }}\n   * />\n   *\n   * // or\n   *\n   * <LineChart.HorizontalLine\n   *   at={{ value: 320.32}}\n   * />\n   * ```\n   */\n  at?:\n    | {\n        index: number;\n        value?: never;\n      }\n    | {\n        index?: never;\n        value: number;\n      }\n    | number;\n};\n\nLineChartHorizontalLine.displayName = 'LineChartHorizontalLine';\n\nexport function LineChartHorizontalLine({\n  color = 'gray',\n  lineProps = {},\n  at = { index: 0 },\n  offsetY = 0,\n}: HorizontalLineProps) {\n  const { width, parsedPath, height, gutter } = React.useContext(\n    LineChartDimensionsContext\n  );\n  const { yDomain } = useLineChart();\n\n  const y = useDerivedValue(() => {\n    if (typeof at === 'number' || at.index != null) {\n      const index = typeof at === 'number' ? at : at.index;\n      const yForX =\n        getYForX(parsedPath!, getXPositionForCurve(parsedPath, index)) || 0;\n      return withTiming(yForX + offsetY);\n    }\n    /**\n     * <gutter>\n     * | ---------- | <- yDomain.max  |\n     * |            |                 | offsetTop\n     * |            | <- value        |\n     * |            |\n     * |            | <- yDomain.min\n     * <gutter>\n     */\n\n    const offsetTop = yDomain.max - at.value;\n    const percentageOffsetTop = offsetTop / (yDomain.max - yDomain.min);\n\n    const heightBetweenGutters = height - gutter * 2;\n\n    const offsetTopPixels = gutter + percentageOffsetTop * heightBetweenGutters;\n\n    return withTiming(offsetTopPixels + offsetY);\n  }, [at, gutter, height, offsetY, parsedPath, yDomain.max, yDomain.min]);\n\n  const lineAnimatedProps = useAnimatedProps(\n    () => ({\n      x1: 0,\n      x2: width,\n      y1: y.value,\n      y2: y.value,\n    }),\n    [width, y]\n  );\n\n  return (\n    <AnimatedLine\n      animatedProps={lineAnimatedProps}\n      strokeWidth={2}\n      stroke={color}\n      strokeDasharray=\"3 3\"\n      {...lineProps}\n    />\n  );\n}\n"]}