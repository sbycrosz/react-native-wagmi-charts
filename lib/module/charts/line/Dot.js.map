{"version":3,"sources":["Dot.tsx"],"names":["React","Animated","Easing","useAnimatedProps","useDerivedValue","withRepeat","withSequence","withTiming","Circle","LineChartDimensionsContext","LineChartPathContext","getXPositionForCurve","getYForX","useLineChart","AnimatedCircle","createAnimatedComponent","LineChartDot","displayName","at","color","defaultColor","dotProps","hasOuterDot","defaultHasOuterDot","hasPulse","inactiveColor","outerDotProps","pulseBehaviour","pulseDurationMs","showInactiveColor","size","outerSize","isActive","parsedPath","useContext","isInactive","_isInactive","opacity","x","y","value","animatedDotProps","cx","cy","animatedOuterDotProps","defaultProps","r","easing","out","sin","animatedOpacity","duration","scale"],"mappings":"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","sourcesContent":["import * as React from 'react';\n\nimport Animated, {\n  Easing,\n  useAnimatedProps,\n  useDerivedValue,\n  withRepeat,\n  withSequence,\n  withTiming,\n} from 'react-native-reanimated';\nimport { Circle, CircleProps } from 'react-native-svg';\n\nimport { LineChartDimensionsContext } from './Chart';\nimport { LineChartPathContext } from './LineChartPathContext';\nimport { getXPositionForCurve } from './utils/getXPositionForCurve';\nimport { getYForX } from 'react-native-redash';\nimport { useLineChart } from './useLineChart';\n\nconst AnimatedCircle = Animated.createAnimatedComponent(Circle);\n\nexport type LineChartDotProps = {\n  dotProps?: Animated.AnimateProps<CircleProps>;\n  outerDotProps?: Animated.AnimateProps<CircleProps>;\n  color?: string;\n  inactiveColor?: string;\n  showInactiveColor?: boolean;\n  at: number;\n  size?: number;\n  hasPulse?: boolean;\n  hasOuterDot?: boolean;\n  /**\n   * If `always`, the outer dot will still animate when interaction is active.\n   *\n   * If `while-inactive`, the outer dot will animate only when the interaction is inactive.\n   *\n   * Default: `while-inactive`\n   */\n  pulseBehaviour?: 'always' | 'while-inactive';\n  /**\n   * Defaults to `size * 4`\n   */\n  outerSize?: number;\n  pulseDurationMs?: number;\n};\n\nLineChartDot.displayName = 'LineChartDot';\n\nexport function LineChartDot({\n  at,\n  color: defaultColor = 'black',\n  dotProps,\n  hasOuterDot: defaultHasOuterDot = false,\n  hasPulse = false,\n  inactiveColor,\n  outerDotProps,\n  pulseBehaviour = 'while-inactive',\n  pulseDurationMs = 800,\n  showInactiveColor = true,\n  size = 4,\n  outerSize = size * 4,\n}: LineChartDotProps) {\n  const { isActive } = useLineChart();\n  const { parsedPath } = React.useContext(LineChartDimensionsContext);\n\n  ////////////////////////////////////////////////////////////\n\n  const { isInactive: _isInactive } = React.useContext(LineChartPathContext);\n  const isInactive = showInactiveColor && _isInactive;\n  const color = isInactive ? inactiveColor || defaultColor : defaultColor;\n  const opacity = isInactive && !inactiveColor ? 0.5 : 1;\n  const hasOuterDot = defaultHasOuterDot || hasPulse;\n\n  ////////////////////////////////////////////////////////////\n\n  const x = useDerivedValue(() => {\n    return withTiming(getXPositionForCurve(parsedPath, at));\n  }, [at, parsedPath]);\n\n  const y = useDerivedValue(\n    () => withTiming(getYForX(parsedPath!, x.value) || 0),\n    [parsedPath, x]\n  );\n\n  ////////////////////////////////////////////////////////////\n\n  const animatedDotProps = useAnimatedProps(\n    () => ({\n      cx: x.value,\n      cy: y.value,\n    }),\n    [x, y]\n  );\n\n  const animatedOuterDotProps = useAnimatedProps(() => {\n    let defaultProps = {\n      cx: x.value,\n      cy: y.value,\n      opacity: 0.1,\n      r: outerSize,\n    };\n\n    if (!hasPulse) {\n      return defaultProps;\n    }\n\n    if (isActive.value && pulseBehaviour === 'while-inactive') {\n      return {\n        ...defaultProps,\n        r: 0,\n      };\n    }\n\n    const easing = Easing.out(Easing.sin);\n    const animatedOpacity = withRepeat(\n      withSequence(\n        withTiming(0.8),\n        withTiming(0, {\n          duration: pulseDurationMs,\n          easing,\n        })\n      ),\n      -1,\n      false\n    );\n    const scale = withRepeat(\n      withSequence(\n        withTiming(0),\n        withTiming(outerSize, {\n          duration: pulseDurationMs,\n          easing,\n        })\n      ),\n      -1,\n      false\n    );\n\n    if (pulseBehaviour === 'while-inactive') {\n      return {\n        ...defaultProps,\n        opacity: isActive.value ? withTiming(0) : animatedOpacity,\n        r: isActive.value ? withTiming(0) : scale,\n      };\n    }\n    return {\n      ...defaultProps,\n      opacity: animatedOpacity,\n      r: scale,\n    };\n  }, [hasPulse, isActive, outerSize, pulseBehaviour, pulseDurationMs, x, y]);\n\n  ////////////////////////////////////////////////////////////\n\n  return (\n    <>\n      <AnimatedCircle\n        animatedProps={animatedDotProps}\n        r={size}\n        fill={color}\n        opacity={opacity}\n        {...dotProps}\n      />\n      {hasOuterDot && (\n        <AnimatedCircle\n          animatedProps={animatedOuterDotProps}\n          fill={color}\n          {...outerDotProps}\n        />\n      )}\n    </>\n  );\n}\n"]}